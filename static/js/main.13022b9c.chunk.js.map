{"version":3,"sources":["components/Samples.js","components/Drumpad.js","App.js","serviceWorker.js","index.js","n2d.png"],"names":["samples","id","name","sound","Drumpad","_this$props","this","props","letter","playSound","audio","react_default","a","createElement","onClick","className","src","Component","App","_Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","sounds","bind","assertThisInitialized","inherits","createClass","key","value","arg","filter","items","_this2","document","addEventListener","e","data","drumDetails","toUpperCase","undefined","playAudio","drumActive","getElementById","classList","add","setTimeout","remove","drumKey","target","innerText","currentTime","play","setState","_this3","n2d","alt","map","drum","idx","components_Drumpad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.13022b9c.chunk.js","sourcesContent":["const samples = [\n  { id: \"Q\", name: \"crash\", sound: \"sounds/crash.mp3\" },\n  { id: \"W\", name: \"hihat\", sound: \"sounds/hihat.mp3\" },\n  { id: \"E\", name: \"kick\", sound: \"sounds/kick.mp3\" },\n  { id: \"A\", name: \"ride\", sound: \"sounds/ride.mp3\" },\n  { id: \"S\", name: \"snare\", sound: \"sounds/snare.mp3\" },\n  { id: \"D\", name: \"splash\", sound: \"sounds/splash.mp3\" },\n  { id: \"Z\", name: \"tom1\", sound: \"sounds/tom1.mp3\" },\n  { id: \"X\", name: \"tom2\", sound: \"sounds/tom2.mp3\" },\n  { id: \"C\", name: \"tom3\", sound: \"sounds/tom3.mp3\" }\n];\n\nexport default samples;\n","import React, { Component } from \"react\";\n\nclass Drumpad extends Component {\n  render() {\n    let { letter, playSound, audio, id } = this.props;\n    return (\n      <div>\n        <div onClick={playSound} id={id} className=\"drum-pad\">\n          <p>{letter}</p>\n          <audio src={audio} className=\"clip\" id={letter}></audio>\n        </div>\n        <p className=\"drum-title\">{id}</p>\n      </div>\n    );\n  }\n}\nexport default Drumpad;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport n2d from \"./n2d.png\";\nimport samples from \"./components/Samples\";\nimport Drumpad from \"./components/Drumpad\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sounds: \"Make some noise.\"\n    };\n\n    this.playSound = this.playSound.bind(this);\n  }\n  drumDetails(arg) {\n    return samples.filter(items => arg === items.id)[0];\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", e => {\n      let data = this.drumDetails(e.key.toUpperCase());\n      if (data !== undefined) {\n        this.playAudio(data.id, data.name);\n        //fetching parent div of audio tag\n        let drumActive = document.getElementById(data.name);\n        //visual changing background color of press key\n        drumActive.classList.add(\"active\");\n        //Resetting to background color\n        setTimeout(() => drumActive.classList.remove(\"active\"), 100);\n      }\n    });\n  }\n\n  playSound(e) {\n    //Getting Letter :eg Q, W, R\n    let drumKey = this.drumDetails(e.target.innerText);\n    //calling PlayAudio func\n    this.playAudio(drumKey.id, drumKey.name);\n  }\n\n  playAudio(key, name) {\n    //Target HTML Audio tag by id\n    let audio = document.getElementById(key);\n    audio.currentTime = 0;\n\n    //play() is inbuilt func to play audio\n    audio.play();\n\n    //updating the drum sound name\n    this.setState({ sounds: name });\n  }\n\n  render() {\n    return (\n      <div className=\"App\" id=\"drum-machine\">\n        <div className=\"App-header\">\n          <img src={n2d} className=\"App-logo\" alt=\"logo\" />\n        </div>\n        <div id=\"display\">\n          <h3>{this.state.sounds}</h3>\n        </div>\n        <div className=\"drum__pad\">\n          {samples.map((drum, idx) => (\n            <Drumpad\n              key={idx}\n              id={drum.name}\n              letter={drum.id}\n              audio={drum.sound}\n              playSound={this.playSound}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/n2d.ce6a1dcd.png\";"],"sourceRoot":""}